java 核心数据结构 list , map,  set(提示: list与set是collection的子类, map 是单独的接口)

1 list 接口实现类

第一 ： arraylist(数组实现object[],默认初始化容量10，以1.5的速度增长)
vector(数组实现object[], 与arraylist区别是方法加了synchronized同步,多线程支持)

linkedlist(双向循环链表的实现) {

node first;
node last;
    node {
         object data;
         node pre;// 上一个节点
         node next;// 下一个节点
    }
}

第二 ： 增加元素到列表的尾部比较add(element)
arraylist 在不牵涉到扩容的时候速度快，如果需要扩容的话，进行数组的copy，效率底下
linkedlist{node{pre(前驱节点),next(后驱节点)}}双向列表 速度快，没什么好说的,因为有last的引用

增加元素到列表任意位置add(index, element)
arraylist 数组的拷贝，越靠前性能越差
linkedlist 先找到那个节点,根据节点所在位置，前半段还是后半段,如果在前半段就是从前
           往后找，因为有first节点，如果在后半短，就是从后往前找，因为有last节点

remove 操作与add等价

第三 : 遍历列表(三种方式)

foreach-->编译后其实就是迭代器

迭代器

for循坏，随机访问: arraylist 比 linkedlist强多了,所以我们从后台取到
                的列表数据显示，都是用arraylist

第四 ：并发场景使用数据结构
        collections.synchronizedlist(new arraylist());产生并发安全的list，
        其实就是在arraylist对应操作时外部加了一层synchronized,用collections.synchronized(xxx)
        都是一样的思想

        copyonwritearraylist(读多写少的环境，读不加锁) 与 vector
          copyonwritearraylist: 写的时候也就是add or remove操作
           写copy一份修改完后设置


2 map 接口实现类

第一 ： hashmap(无序): 对key进行hash,hash值就对应着内存地址，默认初始容量16，loadfactor 负载因子

基于数组的单向列表实现
hashmap {
    node<k, v>[]

    node {
       int hash;
       k key;
       v value;
       node next;(这个就是为hash(key)冲突解决问题的)
    }
}
native 方法比普通方法快,因为操作的是本地链接库的api

第二 ： hashtable 对多线程支持，实现与hashmap差不多，和arraylist与vector一样

第三 ： linkedhashmap(有序的,因为这个entry继承hashmap.entry，增加了after,与before引用)
    两种顺序{
        时间顺序 : 元素访问顺序，倒序
        插入顺序 : 先插入，先出来
        }
(list,map)集合在遍历时，不要对集合做结构性修改(add与remove操作，这里用iter.remove)

第四 ： treemap (implement sortedmap, 有序的map, 其实就是key可以比较，实现comparable接口)
还有一些好用接口

treemap nb,把元素放进去就排好序了，根据key来排序，所以遍历的时候是排好序的，而且有nb接口获取
子集合，都不用自己写算法

第四  并发
     concurrenthashmap 与 collections.synchronized(map) 的比较

     concurrenthashmap 读不锁,只有写锁,而且锁的粒度比hashmap小


3 set(元素的唯一性,其实hashmap中key的唯一性的实现) 接口实现类

hashset (封装了hashmap,也就是底层是hashmap实现)
hashset {
    hashmap<e,object> map;// 有这样一个属性,value是一个确定的值
}

linkedhashset (封装了linkedhashmap), 插入顺序，遍历出来

treeset (封装了treemap)


性能优化，数据结构的选择大方向


4 queue(单向列表,只有next) 容量，也就是最大值，超过这个值异常，或者callback策略

blockingqueue 简写线程之间的通信

concurrentlinkedqueue  无锁实现，比linkedblockingqueue 性能好

deque(双向列表,因为node{pre与next节点引用},由节点决定)

linkeddeque, arraydeque, 线程不安全实现类

concurrentlinkeddeque 支持多线程


java 内存模型

主内存与工作内存的数据传送原理,从主内存拷贝数据到工作内存，注意并不是原子操作
所以由线程安全的问题

volatile

1, 可见性: 一个线程对变量的修改，可以即时反应到其他线程, 很适合对volatile boolean running修饰
2, 有序性

 并发

线程的创建与销毁比本任务耗时要长，得不偿失

线程池-->复用，里面有多个线程 run方法内死循坏,从队列中获取任务，当没任务时，wait()

threadpoolexecutor {
   corepoolsize: 核心线程数(永不回收)
   maxpoolsize: 最大线程数(超过设置的空闲时间回收)
   keeplivetime : 空闲时长
   unit: 单位
   workqueue: 任务提交但未执行的任务队列(也可以说时等待执行任务队列，或者缓存任务队列)
   theradfactory : 线程工厂
   rejectedexecutorhandler : 拒绝执行回掉,也就是超过任务的容量时
}


容量为0的队列 ： synchronousqueue(直接提交队列) ，不保存任务size=0的任务队列,
                一个线程插入必须等待另一个线程remove，适用于任务立马执行的情景，
                并且线程最大数应该设置很大

有界任务队列 ： arrayblockingqueue(int capacity)需要设置一个容量，也就是缓存任务的最大值
               有新任务执行时，当未到达核心线程数量,创建新线程，如果已经达到核心线程数量，也就是
               各个线程都很繁忙的时候，加入缓存队列，如果缓存队列已满，将会创建新的线程，这时线程的数量
               超过了核心数量，当达到了最大核心数量的线程，这时会执行拒绝策略的callback

               任务 ----> corethread --->  workqueue  -->  maxthreads ----> rejectedexecutor


无界队列 :  linkedblockingqueue 其实它的缓存队列大小 size=integer.max, 所以使用无界的缓存任务队列
            永远都无法达到maxthread大小, 核心数量的线程繁忙时，有新的任务时，缓存队列快速增长，直到
            耗尽app内存

总结: 无界的缓存队列，线程永远都不会达到你设置的max Thread,因为对任务的处理逻辑就是摆在那里

有优先级的无界队列:  PriorityblockingQueue  在缓存队列中的任务，实现comparable接口，优先级高的先处理



拒绝策略 :  RejectedExecutorHandler 四种

1 AbortPolicy  直接抛出异常
2 CallerRunsPolicy 直接在调用者线程执行
3 DiscardOldestPolicty 丢弃最老的请求，也就是把头部移除，继续添加
4 DiscardPolicy  直接丢弃


写文件的三种方式
1

